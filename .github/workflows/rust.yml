name: Rust

on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      max-parallel: 2
      matrix:
        rust: [stable, beta, nightly, 1.46.0, 1.51.0, 1.57.0, 1.64.0]

    steps:
    - uses: actions/checkout@v2
    - name: ci-all-versions
      run: |
        rustup override set ${{ matrix.rust }}
        cargo update
          
        cd "${{github.workspace}}/const_format_proc_macros/"
        cargo test

        cd "${{github.workspace}}/const_format/"
        cargo test --features "__test"

    - uses: actions/checkout@v2
    - name: ci-stable
      if: ${{ matrix.rust == '1.51.0' }}
      run: |
        cargo update

        cd "${{github.workspace}}/const_format/"
        cargo test --features "__test rust_1_51"

    - uses: actions/checkout@v2
    - name: ci-stable
      if: ${{ matrix.rust == '1.57.0' }}
      run: |
        cargo update

        cd "${{github.workspace}}/const_format/"

        cargo test --features "__test assertcp"
        cargo test --features "__test rust_1_51"


    - uses: actions/checkout@v2
    - name: ci-stable
      if: ${{ matrix.rust == '1.64.0' }}
      run: |
        cargo update

        cd "${{github.workspace}}/const_format/"

        cargo test --features "__test rust_1_64"

    - uses: actions/checkout@v2
    - name: ci-nighly
      if: ${{ matrix.rust == 'nightly' && runner.os == 'Linux' }}
      run: |
        rustup override set ${{ matrix.rust }}

        cargo update -Z minimal-versions
        
        cd "${{github.workspace}}/const_format_proc_macros/"
        cargo test

        cd "${{github.workspace}}/const_format/"
        
        cargo test --features "__test"
        cargo test --features "__test more_str_macros"
        cargo test --features "__test assertcp"
        cargo test --features "__test fmt"
        cargo test --features "__test assertc"
        cargo test --features "__test derive"
        cargo test --features "__test constant_time_as_str"
        cargo test --features "__test rust_1_51"
        cargo test --features "__test rust_1_64"
        cargo test --features "__test derive constant_time_as_str"
        cargo test --features "__test derive constant_time_as_str assertc"
        cargo test --features "__test derive constant_time_as_str assertc more_str_macros rust_1_64"

        MIRI_NIGHTLY=nightly-$(curl -s https://rust-lang.github.io/rustup-components-history/x86_64-unknown-linux-gnu/miri)
        MIRIFLAGS="-Zmiri-strict-provenance -Zmiri-check-number-validity -Zmiri-symbolic-alignment-check"
        echo "Installing latest nightly with Miri"
        echo "$MIRI_NIGHTLY"
        rustup set profile minimal
        rustup default "$MIRI_NIGHTLY"
        rustup override set "$MIRI_NIGHTLY"
        rustup component add miri
        cargo miri setup

        cargo clean 

        cargo miri test --tests --features "__test derive fmt assertc"
        cargo miri test --features "__test derive fmt constant_time_as_str assertc"
